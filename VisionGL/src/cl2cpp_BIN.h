
/*********************************************************************
***                                                                 ***
***  Source code generated by cl2cpp.pl                             ***
***                                                                 ***
***  Please do not edit                                             ***
***                                                                 ***
*********************************************************************/
#include "vglImage.h"

#include "vglShape.h"

#include "vglStrEl.h"

/** Copy of binary image img_input to img_output.

  */
void vglCl3dBinCopy(VglImage* img_input, VglImage* img_output);

/** Dilation of img_input by mask. Result is stored in img_output.

  */
void vglCl3dBinDilate(VglImage* img_input, VglImage* img_output, float* convolution_window, int window_size_x, int window_size_y, int window_size_z);

/** Dilation of img_input by mask. Result is stored in img_output.

  */
void vglCl3dBinDilatePack(VglImage* img_input, VglImage* img_output, float* convolution_window, int window_size_x, int window_size_y, int window_size_z);

/** Dilation of img_input by mask. Result is stored in img_output.

  */
void vglCl3dBinErode(VglImage* img_input, VglImage* img_output, float* convolution_window, int window_size_x, int window_size_y, int window_size_z);

/** Erosion of img_input by mask. Result is stored in img_output.

  */
void vglCl3dBinErodePack(VglImage* img_input, VglImage* img_output, float* convolution_window, int window_size_x, int window_size_y, int window_size_z);

/** Maximum or union between two images.

    Maximum or union between img_input1 and img_input2. Result save in img_output.
  */
void vglCl3dBinMax(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Minimum or intersection between two images.

    Minimum or intersection between img_input1 and img_input2. Result saved in img_output.
  */
void vglCl3dBinMin(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Negation of binary image img_input. Result is stored in img_output.

  */
void vglCl3dBinNot(VglImage* img_input, VglImage* img_output);

/** Generate ROI.

    Generate ROI (Region Of Interest). Useful to be used as mask to do intersection
    with other images.

  */
void vglCl3dBinRoi(VglImage* img_output, int x0, int y0, int z0, int xf, int yf, int zf);

/** Subtraction or difference between two binary images.

    Subtraction or difference between two binary images. Finds img_input1 minus img_input2 and
    saves in img_output.
  */
void vglCl3dBinSub(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Negation of binary image img_input. Result is stored in img_output.

  */
void vglCl3dBinSwap(VglImage* img_input, VglImage* img_output);

/** Threshold of grayscale image with binary result.

    Threshold of grayscale image img_input. Result is binary, stored in img_output. Parameter
    thresh is float between 0.0 and 1.0.
  */
void vglCl3dBinThreshold(VglImage* img_input, VglImage* img_output, float thresh);

/** Convert binary image to grayscale.

    Convert binary image to grayscale.
  */
void vglCl3dBinToGray(VglImage* img_input, VglImage* img_output);

/** Conway game of life.

  */
void vglClBinConway(VglImage* img_input, VglImage* img_output);

/** Copy of binary image img_input to img_output.

  */
void vglClBinCopy(VglImage* img_input, VglImage* img_output);

/** Dilation of img_input by mask. Result is stored in img_output.

  */
void vglClBinDilate(VglImage* img_input, VglImage* img_output, float* convolution_window, int window_size_x, int window_size_y);

/** Dilation of img_input by mask. Result is stored in img_output.

  */
void vglClBinDilatePack(VglImage* img_input, VglImage* img_output, float* convolution_window, int window_size_x, int window_size_y);

/** Erosion of img_input by mask. Result is stored in img_output.

  */
void vglClBinErode(VglImage* img_input, VglImage* img_output, float* convolution_window, int window_size_x, int window_size_y);

/** Dilation of img_input by mask. Result is stored in img_output.

  */
void vglClBinErodePack(VglImage* img_input, VglImage* img_output, float* convolution_window, int window_size_x, int window_size_y);

/** Maximum or union between two images.

    Maximum or union between img_input1 and img_input2. Result saved in img_output.
  */
void vglClBinMax(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Minimum or intersection between two images.

    Minimum or intersection between img_input1 and img_input2. Result saved in img_output.
  */
void vglClBinMin(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Negation of binary image img_input. Result is stored in img_output.

  */
void vglClBinNot(VglImage* img_input, VglImage* img_output);

/** Generate ROI.

    Generate ROI (Region Of Interest). Useful to be used as mask to do intersection
    with other images.

  */
void vglClBinRoi(VglImage* img_output, int x0, int y0, int xf, int yf);

/** Subtraction or difference between two binary images.

    Subtraction or difference between two binary images. Finds img_input1 minus img_input2 and
    saves in img_output.
  */
void vglClBinSub(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Negation of binary image img_input. Result is stored in img_output.

  */
void vglClBinSwap(VglImage* img_input, VglImage* img_output);

/** Threshold of grayscale image with binary result.

    Threshold of grayscale image img_input. Result is binary, stored in img_output. Parameter
    thresh is float between 0.0 and 1.0.
  */
void vglClBinThreshold(VglImage* img_input, VglImage* img_output, float thresh);

/** Convert binary image to grayscale.

    Convert binary image to grayscale.
  */
void vglClBinToGray(VglImage* img_input, VglImage* img_output);

/** Copy N-dimensional image word by word.

  */
void vglClNdBinCopy(VglImage* img_input, VglImage* img_output);

/** N-dimensional dilation

    SHAPE directive passes a structure with size of each dimension, offsets and number of dimensions. Parameter does not appear in wrapper parameter list. The C expression between parenthesis returns the desired shape of type VglClShape.
    
  */
void vglClNdBinDilate(VglImage* img_input, VglImage* img_output, VglStrEl* window);

/** N-dimensional dilation

    SHAPE directive passes a structure with size of each dimension, offsets and number of dimensions. Parameter does not appear in wrapper parameter list. The C expression between parenthesis returns the desired shape of type VglClShape.
    
  */
void vglClNdBinDilatePack(VglImage* img_input, VglImage* img_output, VglStrEl* window);

/** N-dimensional erosion

    SHAPE directive passes a structure with size of each dimension, offsets and number of dimensions. Parameter does not appear in wrapper parameter list. The C expression between parenthesis returns the desired shape of type VglClShape.
    
  */
void vglClNdBinErode(VglImage* img_input, VglImage* img_output, VglStrEl* window);

/** N-dimensional erosion

    SHAPE directive passes a structure with size of each dimension, offsets and number of dimensions. Parameter does not appear in wrapper parameter list. The C expression between parenthesis returns the desired shape of type VglClShape.
    
  */
void vglClNdBinErodePack(VglImage* img_input, VglImage* img_output, VglStrEl* window);

/** Maximum or union between two images.

    Maximum or union between img_input1 and img_input2. Result saved in img_output.
  */
void vglClNdBinMax(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Minimum or intersection between two images.

    Minimum or intersection between img_input1 and img_input2. Result saved in img_output.
  */
void vglClNdBinMin(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Negation of binary image img_input. Result is stored in img_output.

  */
void vglClNdBinNot(VglImage* img_input, VglImage* img_output);

/** Generate ROI.

    Generate ROI (Region Of Interest). Useful to be used as mask to do intersection
    with other images.

  */
void vglClNdBinRoi(VglImage* img_output, int* p0, int* pf);

/** Subtraction or difference between two binary images.

    Subtraction or difference between two binary images. Finds img_input1 minus img_input2 and
    saves in img_output.
  */
void vglClNdBinSub(VglImage* img_input1, VglImage* img_input2, VglImage* img_output);

/** Negation of binary image img_input. Result is stored in img_output.

  */
void vglClNdBinSwap(VglImage* img_input, VglImage* img_output);

/** Threshold of img_input by parameter. if the pixel is below thresh,
    the output is 0, else, the output is 1. Result is stored in img_output.
    Input image is 8bpp and output is 1bpp.
  */
void vglClNdBinThreshold(VglImage* img_input, VglImage* img_output, unsigned char thresh);

/** Convert binary image to grayscale.

    Convert binary image to grayscale.
  */
void vglClNdBinToGray(VglImage* img_input, VglImage* img_output);

