
/*********************************************************************
***                                                                 ***
***  Source code generated by cl2cpp.pl                             ***
***                                                                 ***
***  Please do not edit                                             ***
***                                                                 ***
*********************************************************************/
#include "vglImage.h"

#include "vglShape.h"

#include "vglStrEl.h"

/** N-dimensional convolution

    SHAPE directive passes a structure with size of each dimension, offsets and number of dimensions. Parameter does not appear in wrapper parameter list. The C expression between parenthesis returns the desired shape of type VglClShape.
    
  */
void vglClNdConvolution(VglImage* img_input, VglImage* img_output, VglStrEl* window);

/** Copy N-dimensional image.

  */
void vglClNdCopy(VglImage* img_input, VglImage* img_output);

/** N-dimensional dilation

    SHAPE directive passes a structure with size of each dimension, offsets and number of dimensions. Parameter does not appear in wrapper parameter list. The C expression between parenthesis returns the desired shape of type VglClShape.
    
  */
void vglClNdDilate(VglImage* img_input, VglImage* img_output, VglStrEl* window);

/** N-dimensional erosion

    SHAPE directive passes a structure with size of each dimension, offsets and number of dimensions. Parameter does not appear in wrapper parameter list. The C expression between parenthesis returns the desired shape of type VglClShape.
    
  */
void vglClNdErode(VglImage* img_input, VglImage* img_output, VglStrEl* window);

/** Invert N-dimensional image.

  */
void vglClNdNot(VglImage* img_input, VglImage* img_output);

/** Threshold of img_input by parameter. if the pixel is below thresh,
    the output is 0, else, the output is top. Result is stored in img_output.
  */
void vglClNdThreshold(VglImage* img_input, VglImage* img_output, unsigned char thresh, unsigned char top = 255);

